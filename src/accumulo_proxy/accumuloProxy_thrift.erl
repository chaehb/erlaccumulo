%%
%% Autogenerated by Thrift Compiler (0.9.1)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(accumuloProxy_thrift).
-behaviour(thrift_service).


-include("accumulo_proxy/accumuloProxy_thrift.hrl").

-export([struct_info/1, function_info/2]).

struct_info('i am a dummy struct') -> undefined.
%%% interface
% login(This, Principal, LoginProperties)
function_info('login', params_type) ->
  {struct, [{1, string},
          {2, {map, string, string}}]}
;
function_info('login', reply_type) ->
  string;
function_info('login', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% addConstraint(This, Login, TableName, ConstraintClassName)
function_info('addConstraint', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('addConstraint', reply_type) ->
  i32;
function_info('addConstraint', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% addSplits(This, Login, TableName, Splits)
function_info('addSplits', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {set, string}}]}
;
function_info('addSplits', reply_type) ->
  {struct, []};
function_info('addSplits', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% attachIterator(This, Login, TableName, Setting, Scopes)
function_info('attachIterator', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'proxy_types', 'iteratorSetting'}}},
          {4, {set, i32}}]}
;
function_info('attachIterator', reply_type) ->
  {struct, []};
function_info('attachIterator', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {2, {struct, {'proxy_types', 'accumuloException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% checkIteratorConflicts(This, Login, TableName, Setting, Scopes)
function_info('checkIteratorConflicts', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'proxy_types', 'iteratorSetting'}}},
          {4, {set, i32}}]}
;
function_info('checkIteratorConflicts', reply_type) ->
  {struct, []};
function_info('checkIteratorConflicts', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {2, {struct, {'proxy_types', 'accumuloException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% clearLocatorCache(This, Login, TableName)
function_info('clearLocatorCache', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('clearLocatorCache', reply_type) ->
  {struct, []};
function_info('clearLocatorCache', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% cloneTable(This, Login, TableName, NewTableName, Flush, PropertiesToSet, PropertiesToExclude)
function_info('cloneTable', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, bool},
          {5, {map, string, string}},
          {6, {set, string}}]}
;
function_info('cloneTable', reply_type) ->
  {struct, []};
function_info('cloneTable', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}},
          {4, {struct, {'proxy_types', 'tableExistsException'}}}]}
;
% compactTable(This, Login, TableName, StartRow, EndRow, Iterators, Flush, Wait)
function_info('compactTable', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string},
          {5, {list, {struct, {'proxy_types', 'iteratorSetting'}}}},
          {6, bool},
          {7, bool}]}
;
function_info('compactTable', reply_type) ->
  {struct, []};
function_info('compactTable', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {2, {struct, {'proxy_types', 'tableNotFoundException'}}},
          {3, {struct, {'proxy_types', 'accumuloException'}}}]}
;
% cancelCompaction(This, Login, TableName)
function_info('cancelCompaction', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('cancelCompaction', reply_type) ->
  {struct, []};
function_info('cancelCompaction', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {2, {struct, {'proxy_types', 'tableNotFoundException'}}},
          {3, {struct, {'proxy_types', 'accumuloException'}}}]}
;
% createTable(This, Login, TableName, VersioningIter, Type)
function_info('createTable', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, bool},
          {4, i32}]}
;
function_info('createTable', reply_type) ->
  {struct, []};
function_info('createTable', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableExistsException'}}}]}
;
% deleteTable(This, Login, TableName)
function_info('deleteTable', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('deleteTable', reply_type) ->
  {struct, []};
function_info('deleteTable', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% deleteRows(This, Login, TableName, StartRow, EndRow)
function_info('deleteRows', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string}]}
;
function_info('deleteRows', reply_type) ->
  {struct, []};
function_info('deleteRows', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% exportTable(This, Login, TableName, ExportDir)
function_info('exportTable', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('exportTable', reply_type) ->
  {struct, []};
function_info('exportTable', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% flushTable(This, Login, TableName, StartRow, EndRow, Wait)
function_info('flushTable', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string},
          {5, bool}]}
;
function_info('flushTable', reply_type) ->
  {struct, []};
function_info('flushTable', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% getDiskUsage(This, Login, Tables)
function_info('getDiskUsage', params_type) ->
  {struct, [{1, string},
          {2, {set, string}}]}
;
function_info('getDiskUsage', reply_type) ->
  {list, {struct, {'proxy_types', 'diskUsage'}}};
function_info('getDiskUsage', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% getLocalityGroups(This, Login, TableName)
function_info('getLocalityGroups', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getLocalityGroups', reply_type) ->
  {map, string, {set, string}};
function_info('getLocalityGroups', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% getIteratorSetting(This, Login, TableName, IteratorName, Scope)
function_info('getIteratorSetting', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, i32}]}
;
function_info('getIteratorSetting', reply_type) ->
  {struct, {'proxy_types', 'iteratorSetting'}};
function_info('getIteratorSetting', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% getMaxRow(This, Login, TableName, Auths, StartRow, StartInclusive, EndRow, EndInclusive)
function_info('getMaxRow', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {set, string}},
          {4, string},
          {5, bool},
          {6, string},
          {7, bool}]}
;
function_info('getMaxRow', reply_type) ->
  string;
function_info('getMaxRow', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% getTableProperties(This, Login, TableName)
function_info('getTableProperties', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getTableProperties', reply_type) ->
  {map, string, string};
function_info('getTableProperties', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% importDirectory(This, Login, TableName, ImportDir, FailureDir, SetTime)
function_info('importDirectory', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string},
          {5, bool}]}
;
function_info('importDirectory', reply_type) ->
  {struct, []};
function_info('importDirectory', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'tableNotFoundException'}}},
          {2, {struct, {'proxy_types', 'accumuloException'}}},
          {3, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% importTable(This, Login, TableName, ImportDir)
function_info('importTable', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('importTable', reply_type) ->
  {struct, []};
function_info('importTable', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'tableExistsException'}}},
          {2, {struct, {'proxy_types', 'accumuloException'}}},
          {3, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% listSplits(This, Login, TableName, MaxSplits)
function_info('listSplits', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i32}]}
;
function_info('listSplits', reply_type) ->
  {list, string};
function_info('listSplits', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% listTables(This, Login)
function_info('listTables', params_type) ->
  {struct, [{1, string}]}
;
function_info('listTables', reply_type) ->
  {set, string};
function_info('listTables', exceptions) ->
  {struct, []}
;
% listIterators(This, Login, TableName)
function_info('listIterators', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('listIterators', reply_type) ->
  {map, string, {set, i32}};
function_info('listIterators', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% listConstraints(This, Login, TableName)
function_info('listConstraints', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('listConstraints', reply_type) ->
  {map, string, i32};
function_info('listConstraints', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% mergeTablets(This, Login, TableName, StartRow, EndRow)
function_info('mergeTablets', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string}]}
;
function_info('mergeTablets', reply_type) ->
  {struct, []};
function_info('mergeTablets', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% offlineTable(This, Login, TableName, Wait)
function_info('offlineTable', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, bool}]}
;
function_info('offlineTable', reply_type) ->
  {struct, []};
function_info('offlineTable', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% onlineTable(This, Login, TableName, Wait)
function_info('onlineTable', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, bool}]}
;
function_info('onlineTable', reply_type) ->
  {struct, []};
function_info('onlineTable', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% removeConstraint(This, Login, TableName, Constraint)
function_info('removeConstraint', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i32}]}
;
function_info('removeConstraint', reply_type) ->
  {struct, []};
function_info('removeConstraint', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% removeIterator(This, Login, TableName, IterName, Scopes)
function_info('removeIterator', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, {set, i32}}]}
;
function_info('removeIterator', reply_type) ->
  {struct, []};
function_info('removeIterator', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% removeTableProperty(This, Login, TableName, Property)
function_info('removeTableProperty', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('removeTableProperty', reply_type) ->
  {struct, []};
function_info('removeTableProperty', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% renameTable(This, Login, OldTableName, NewTableName)
function_info('renameTable', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('renameTable', reply_type) ->
  {struct, []};
function_info('renameTable', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}},
          {4, {struct, {'proxy_types', 'tableExistsException'}}}]}
;
% setLocalityGroups(This, Login, TableName, Groups)
function_info('setLocalityGroups', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {map, string, {set, string}}}]}
;
function_info('setLocalityGroups', reply_type) ->
  {struct, []};
function_info('setLocalityGroups', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% setTableProperty(This, Login, TableName, Property, Value)
function_info('setTableProperty', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string}]}
;
function_info('setTableProperty', reply_type) ->
  {struct, []};
function_info('setTableProperty', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% splitRangeByTablets(This, Login, TableName, Range, MaxSplits)
function_info('splitRangeByTablets', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'proxy_types', 'range'}}},
          {4, i32}]}
;
function_info('splitRangeByTablets', reply_type) ->
  {set, {struct, {'proxy_types', 'range'}}};
function_info('splitRangeByTablets', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% tableExists(This, Login, TableName)
function_info('tableExists', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('tableExists', reply_type) ->
  bool;
function_info('tableExists', exceptions) ->
  {struct, []}
;
% tableIdMap(This, Login)
function_info('tableIdMap', params_type) ->
  {struct, [{1, string}]}
;
function_info('tableIdMap', reply_type) ->
  {map, string, string};
function_info('tableIdMap', exceptions) ->
  {struct, []}
;
% testTableClassLoad(This, Login, TableName, ClassName, AsTypeName)
function_info('testTableClassLoad', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string}]}
;
function_info('testTableClassLoad', reply_type) ->
  bool;
function_info('testTableClassLoad', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% pingTabletServer(This, Login, Tserver)
function_info('pingTabletServer', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('pingTabletServer', reply_type) ->
  {struct, []};
function_info('pingTabletServer', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% getActiveScans(This, Login, Tserver)
function_info('getActiveScans', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getActiveScans', reply_type) ->
  {list, {struct, {'proxy_types', 'activeScan'}}};
function_info('getActiveScans', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% getActiveCompactions(This, Login, Tserver)
function_info('getActiveCompactions', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getActiveCompactions', reply_type) ->
  {list, {struct, {'proxy_types', 'activeCompaction'}}};
function_info('getActiveCompactions', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% getSiteConfiguration(This, Login)
function_info('getSiteConfiguration', params_type) ->
  {struct, [{1, string}]}
;
function_info('getSiteConfiguration', reply_type) ->
  {map, string, string};
function_info('getSiteConfiguration', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% getSystemConfiguration(This, Login)
function_info('getSystemConfiguration', params_type) ->
  {struct, [{1, string}]}
;
function_info('getSystemConfiguration', reply_type) ->
  {map, string, string};
function_info('getSystemConfiguration', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% getTabletServers(This, Login)
function_info('getTabletServers', params_type) ->
  {struct, [{1, string}]}
;
function_info('getTabletServers', reply_type) ->
  {list, string};
function_info('getTabletServers', exceptions) ->
  {struct, []}
;
% removeProperty(This, Login, Property)
function_info('removeProperty', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('removeProperty', reply_type) ->
  {struct, []};
function_info('removeProperty', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% setProperty(This, Login, Property, Value)
function_info('setProperty', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('setProperty', reply_type) ->
  {struct, []};
function_info('setProperty', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% testClassLoad(This, Login, ClassName, AsTypeName)
function_info('testClassLoad', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('testClassLoad', reply_type) ->
  bool;
function_info('testClassLoad', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% authenticateUser(This, Login, User, Properties)
function_info('authenticateUser', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {map, string, string}}]}
;
function_info('authenticateUser', reply_type) ->
  bool;
function_info('authenticateUser', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% changeUserAuthorizations(This, Login, User, Authorizations)
function_info('changeUserAuthorizations', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {set, string}}]}
;
function_info('changeUserAuthorizations', reply_type) ->
  {struct, []};
function_info('changeUserAuthorizations', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% changeLocalUserPassword(This, Login, User, Password)
function_info('changeLocalUserPassword', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('changeLocalUserPassword', reply_type) ->
  {struct, []};
function_info('changeLocalUserPassword', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% createLocalUser(This, Login, User, Password)
function_info('createLocalUser', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('createLocalUser', reply_type) ->
  {struct, []};
function_info('createLocalUser', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% dropLocalUser(This, Login, User)
function_info('dropLocalUser', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('dropLocalUser', reply_type) ->
  {struct, []};
function_info('dropLocalUser', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% getUserAuthorizations(This, Login, User)
function_info('getUserAuthorizations', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getUserAuthorizations', reply_type) ->
  {list, string};
function_info('getUserAuthorizations', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% grantSystemPermission(This, Login, User, Perm)
function_info('grantSystemPermission', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i32}]}
;
function_info('grantSystemPermission', reply_type) ->
  {struct, []};
function_info('grantSystemPermission', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% grantTablePermission(This, Login, User, Table, Perm)
function_info('grantTablePermission', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, i32}]}
;
function_info('grantTablePermission', reply_type) ->
  {struct, []};
function_info('grantTablePermission', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% hasSystemPermission(This, Login, User, Perm)
function_info('hasSystemPermission', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i32}]}
;
function_info('hasSystemPermission', reply_type) ->
  bool;
function_info('hasSystemPermission', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% hasTablePermission(This, Login, User, Table, Perm)
function_info('hasTablePermission', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, i32}]}
;
function_info('hasTablePermission', reply_type) ->
  bool;
function_info('hasTablePermission', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% listLocalUsers(This, Login)
function_info('listLocalUsers', params_type) ->
  {struct, [{1, string}]}
;
function_info('listLocalUsers', reply_type) ->
  {set, string};
function_info('listLocalUsers', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% revokeSystemPermission(This, Login, User, Perm)
function_info('revokeSystemPermission', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i32}]}
;
function_info('revokeSystemPermission', reply_type) ->
  {struct, []};
function_info('revokeSystemPermission', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% revokeTablePermission(This, Login, User, Table, Perm)
function_info('revokeTablePermission', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, i32}]}
;
function_info('revokeTablePermission', reply_type) ->
  {struct, []};
function_info('revokeTablePermission', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% createBatchScanner(This, Login, TableName, Options)
function_info('createBatchScanner', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'proxy_types', 'batchScanOptions'}}}]}
;
function_info('createBatchScanner', reply_type) ->
  string;
function_info('createBatchScanner', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% createScanner(This, Login, TableName, Options)
function_info('createScanner', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'proxy_types', 'scanOptions'}}}]}
;
function_info('createScanner', reply_type) ->
  string;
function_info('createScanner', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% hasNext(This, Scanner)
function_info('hasNext', params_type) ->
  {struct, [{1, string}]}
;
function_info('hasNext', reply_type) ->
  bool;
function_info('hasNext', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'unknownScanner'}}}]}
;
% nextEntry(This, Scanner)
function_info('nextEntry', params_type) ->
  {struct, [{1, string}]}
;
function_info('nextEntry', reply_type) ->
  {struct, {'proxy_types', 'keyValueAndPeek'}};
function_info('nextEntry', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'noMoreEntriesException'}}},
          {2, {struct, {'proxy_types', 'unknownScanner'}}},
          {3, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% nextK(This, Scanner, K)
function_info('nextK', params_type) ->
  {struct, [{1, string},
          {2, i32}]}
;
function_info('nextK', reply_type) ->
  {struct, {'proxy_types', 'scanResult'}};
function_info('nextK', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'noMoreEntriesException'}}},
          {2, {struct, {'proxy_types', 'unknownScanner'}}},
          {3, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% closeScanner(This, Scanner)
function_info('closeScanner', params_type) ->
  {struct, [{1, string}]}
;
function_info('closeScanner', reply_type) ->
  {struct, []};
function_info('closeScanner', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'unknownScanner'}}}]}
;
% updateAndFlush(This, Login, TableName, Cells)
function_info('updateAndFlush', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {map, string, {list, {struct, {'proxy_types', 'columnUpdate'}}}}}]}
;
function_info('updateAndFlush', reply_type) ->
  {struct, []};
function_info('updateAndFlush', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}},
          {4, {struct, {'proxy_types', 'mutationsRejectedException'}}}]}
;
% createWriter(This, Login, TableName, Opts)
function_info('createWriter', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'proxy_types', 'writerOptions'}}}]}
;
function_info('createWriter', reply_type) ->
  string;
function_info('createWriter', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% update(This, Writer, Cells)
function_info('update', params_type) ->
  {struct, [{1, string},
          {2, {map, string, {list, {struct, {'proxy_types', 'columnUpdate'}}}}}]}
;
function_info('update', reply_type) ->
  oneway_void;
function_info('update', exceptions) ->
  {struct, []}
;
% flush(This, Writer)
function_info('flush', params_type) ->
  {struct, [{1, string}]}
;
function_info('flush', reply_type) ->
  {struct, []};
function_info('flush', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'unknownWriter'}}},
          {2, {struct, {'proxy_types', 'mutationsRejectedException'}}}]}
;
% closeWriter(This, Writer)
function_info('closeWriter', params_type) ->
  {struct, [{1, string}]}
;
function_info('closeWriter', reply_type) ->
  {struct, []};
function_info('closeWriter', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'unknownWriter'}}},
          {2, {struct, {'proxy_types', 'mutationsRejectedException'}}}]}
;
% updateRowConditionally(This, Login, TableName, Row, Updates)
function_info('updateRowConditionally', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, {struct, {'proxy_types', 'conditionalUpdates'}}}]}
;
function_info('updateRowConditionally', reply_type) ->
  i32;
function_info('updateRowConditionally', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% createConditionalWriter(This, Login, TableName, Options)
function_info('createConditionalWriter', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'proxy_types', 'conditionalWriterOptions'}}}]}
;
function_info('createConditionalWriter', reply_type) ->
  string;
function_info('createConditionalWriter', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'accumuloException'}}},
          {2, {struct, {'proxy_types', 'accumuloSecurityException'}}},
          {3, {struct, {'proxy_types', 'tableNotFoundException'}}}]}
;
% updateRowsConditionally(This, ConditionalWriter, Updates)
function_info('updateRowsConditionally', params_type) ->
  {struct, [{1, string},
          {2, {map, string, {struct, {'proxy_types', 'conditionalUpdates'}}}}]}
;
function_info('updateRowsConditionally', reply_type) ->
  {map, string, i32};
function_info('updateRowsConditionally', exceptions) ->
  {struct, [{1, {struct, {'proxy_types', 'unknownWriter'}}},
          {2, {struct, {'proxy_types', 'accumuloException'}}},
          {3, {struct, {'proxy_types', 'accumuloSecurityException'}}}]}
;
% closeConditionalWriter(This, ConditionalWriter)
function_info('closeConditionalWriter', params_type) ->
  {struct, [{1, string}]}
;
function_info('closeConditionalWriter', reply_type) ->
  {struct, []};
function_info('closeConditionalWriter', exceptions) ->
  {struct, []}
;
% getRowRange(This, Row)
function_info('getRowRange', params_type) ->
  {struct, [{1, string}]}
;
function_info('getRowRange', reply_type) ->
  {struct, {'proxy_types', 'range'}};
function_info('getRowRange', exceptions) ->
  {struct, []}
;
% getFollowing(This, Key, Part)
function_info('getFollowing', params_type) ->
  {struct, [{1, {struct, {'proxy_types', 'key'}}},
          {2, i32}]}
;
function_info('getFollowing', reply_type) ->
  {struct, {'proxy_types', 'key'}};
function_info('getFollowing', exceptions) ->
  {struct, []}
;
function_info(_Func, _Info) -> no_function.

